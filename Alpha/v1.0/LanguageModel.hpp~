/*
  This class defines the Language model for the application, encompassing all language modelling responsibilities.
  The class assumes that previous stages have done their best to generate and output the likeliest set of strings
  from some lattice of key clusters; each of these strings is a possible near-edit to the intended input word,
  ranked by physical probability with respect to the input.

  This class then re-conditions the probability of each string, based on how well the string matches various language
  modeling characteristics.

  Input: a sorted list of string-probability (string-double) pairs, representing a possible word and its physical likelihood.
  Output: a re-ranked list of the same string-probability pairs.

  The class has three models, in three stages:
    -character-gram models: recondition the probability of each string based on a crypto-based character-gram model
    -edit distance: see if any words fall within an edit-distance of 1 or two rotations/additions/deletions
    -word n-gram model: finally, once a final ranking of words is produced, re-ranked based on previous three or so input words.

  TODO: edit distance, word n-gram model. Word n-gram should be a simple plug-in, with the added user inoput of the user's previous words.

  Notes: Language models always incur huge memory overhead, when storing various models (n-gram, chargram, edits, etc). Come up with memory allocation
  strategies to overcome this.

*/

#include "Header.hpp"

class LanguageModel{
  public:
    LanguageModel();
    ~LanguageModel();

    NgramModel unigramModel;
    NgramModel bigramModel;
    NgramModel trigramModel;
    NgramModel quadgramModel;

    /*
    TODO
    WordGramModel wordMonogramModel;
    WordGramModel wordBigramModel;
    WordGramModel wordTrigramModel;   

    //SearchForEdits(edits, 2); //edit distance processing. second parameter is max edit-distances to search for.
    //ReconditionByWordGrams(list<string> usersPreviousInputs, edits);  
    */

    double GetTrigramProbability(char a, char b, char c);
    double GetUnigramProbability(char a);
    double GetBigramProbability(char a, char b);
    void BuildCharacterNgramModel(const string& ngramFile);

    //core functionality
    void ReconditionByCharGrams(LatticePaths& edits);
    void Process(LatticePaths& edits);

};
